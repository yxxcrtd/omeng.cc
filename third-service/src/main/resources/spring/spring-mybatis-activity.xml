<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
   http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">


    <context:property-placeholder location="classpath:database.properties" ignore-unresolvable="true"/>

    <bean id="dataSourceActivity" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${carinsur.mysql.driverClassName}"/>
        <property name="url" value="${carinsur.mysql.url}"/>
        <property name="username" value="${carinsur.mysql.username}"/>
        <property name="password" value="${carinsur.mysql.password}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${carinsur.mysql.initialSize}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${carinsur.mysql.maxActive}"/>
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${carinsur.mysql.maxIdle}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${carinsur.mysql.minIdle}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${carinsur.mysql.maxWait}"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${carinsur.mysql.removeAbandoned}"/>
        <!-- 超过时间限制多长 -->
        <property name="removeAbandonedTimeout" value="${carinsur.mysql.removeAbandonedTimeout}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${carinsur.mysql.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${carinsur.mysql.minEvictableIdleTimeMillis}"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${carinsur.mysql.validationQuery}"/>
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${carinsur.mysql.testWhileIdle}"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${carinsur.mysql.testOnBorrow}"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${carinsur.mysql.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${carinsur.mysql.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${carinsur.mysql.maxPoolPreparedStatementPerConnectionSize}"/>
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall -->
        <property name="filters" value="${carinsur.mysql.filters}"/>
        <property name="defaultAutoCommit" value="true"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactoryActivity" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceActivity"/>
        <property name="configLocation" value="classpath:spring/configuration.xml"/>
        <!-- 自动扫描mapping.xml文件 /*/为指定模块xml位置 -->
        <property name="mapperLocations" value="classpath*:com/shanjin/*/mybatis/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.shanjin.carinsur.dao;com.shanjin.goldplan.dao,"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryActivity"/>
    </bean>


    <!--车险事务处理-->

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManagerActivity" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceActivity"/>
    </bean>

    <!--  配置事务传播特性 -->
    <tx:advice id="carAdvice" transaction-manager="transactionManagerActivity">
        <tx:attributes>
            <tx:method name="postDueCallBack"/>
            <tx:method name="parseMsgCallBack"/>
        </tx:attributes>
    </tx:advice>

    <!--  配置参与事务的类 -->
    <aop:config>
        <aop:pointcut id="carServiceMethodPointcut" expression="execution(* com.shanjin.carinsur.service.impl.*.*(..))"/>
        <aop:advisor pointcut-ref="carServiceMethodPointcut" advice-ref="carAdvice"/>
    </aop:config>

</beans>
